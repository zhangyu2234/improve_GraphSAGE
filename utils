import dgl
import torch
from torch_geometric.data import Data, HeteroData
import torch
import torch_geometric.utils
from torch_geometric.data import HeteroData
from torch_geometric.typing import (
    Adj,
    OptPairTensor,
    OptTensor,
    SparseTensor,
    torch_sparse)
import numpy as np
from torch_geometric.utils import add_self_loops as add_self_loops_fn
from torch_geometric.utils import (
    is_torch_sparse_tensor,
    scatter,
    spmm,
    to_edge_index,
)
from torch_geometric.utils.num_nodes import maybe_num_nodes
from torch_geometric.utils.sparse import set_sparse_value
from torch_geometric.utils import add_remaining_self_loops



def from_dgl(g):

    if not isinstance(g, dgl.DGLGraph):
        raise ValueError(f"Invalid data type (got '{type(g)}')")

    if g.is_homogeneous:
        data = Data()
        data.edge_index = torch.stack(g.edges(), dim=0)

        for attr, value in g.ndata.items():
            data[attr] = value
        for attr, value in g.edata.items():
            data[attr] = value

        return data

    data = HeteroData()

    for node_type in g.ntypes:
        for attr, value in g.nodes[node_type].data.items():
            data[node_type][attr] = value

    for edge_type in g.canonical_etypes:
        row, col = g.edges(form="uv", etype=edge_type)
        data[edge_type].edge_index = torch.stack([row, col], dim=0)
        for attr, value in g.edge_attr_schemes(edge_type).items():
            data[edge_type][attr] = value

    return data



def cal_deg (edge_index, edge_weight=None, num_nodes=None, improved=False,
             add_self_loops=True, flow="source_to_target", dtype=None):

    fill_value = 2. if improved else 1.

    # 判断邻接矩阵是否为SparseTensor（稀疏矩阵）
    if isinstance(edge_index, SparseTensor):
        assert edge_index.size(0) == edge_index.size(1)
        adj_t = edge_index

        if not adj_t.has_value():
            adj_t = adj_t.fill_value(1., dtype=dtype)

        if add_self_loops:
            # 对角线元素全为fill_value的值，其余全为0
            adj_t = torch_sparse.fill_diag(adj_t, fill_value)
        deg = torch.sparse.sum(adj_t, dim=1)
        return deg

    if is_torch_sparse_tensor(edge_index):
        assert edge_index.size(0) == edge_index.size(1)
        # 如果edge_index的布局是torch.sparse_csc，即压缩稀疏列（Compressed Sparse Column）格式，
        # 那么就会引发一个"NotImplementedError"（未实现错误）异常。

        if edge_index.layout == torch.sparse_csc:
            raise NotImplementedError("Sparse CSC matrices are not yet "
                                      "Supported in 'gcn_norm'")
        adj_t = edge_index

        if add_self_loops:
            adj_t, _ = add_self_loops_fn(adj_t, None, fill_value, num_nodes)
        edge_index, value = to_edge_index(adj_t)
        col, row = edge_index[0], edge_index[1]
        deg = scatter(value, col, 0, dim_size=num_nodes, reduce='sum')
        # 将每一个节点的度进行归一化
        deg_inv_sqrt = deg.pow(-0.5)
        # 在计算 1 / sqrt(deg[i]) 时，如果节点的度为0，则 1 / sqrt(0) 将得到无穷大（inf）。为了避免出现无穷大的情况
        # 这里使用了 masked_fill_ 方法将所有的无穷大值替换为0
        deg_inv_sqrt.masked_fill_(deg_inv_sqrt == float('inf'), 0)
        value = deg_inv_sqrt[row] * value * deg_inv_sqrt[col]
        # 将adj_t中非零值替换为value
        return set_sparse_value(adj_t, value), None

    # 检查边的流向是否正确设置，并确定图的节点数量
    assert flow in ['source_to_target', 'target_to_source']
    num_nodes = maybe_num_nodes(edge_index, num_nodes)

    # 计算边带有权重的邻接矩阵
    if add_self_loops:
        edge_index, edge_weight = add_remaining_self_loops(
            edge_index, edge_weight, fill_value, num_nodes)

    if edge_weight is None:
        edge_weight = torch.ones((edge_index.size(1), ), dtype=dtype,
                                 device=edge_index.device)
    # 如果 flow 的值是 'source_to_target'，则 idx 将被设置为 col，这意味着边的方向是从起始节点到终止节点。
    # 如果 flow 的值是 'target_to_source'，则 idx 将被设置为 row，这意味着边的方向是从终止节点到起始节点。
    row, col = edge_index[0], edge_index[1]
    idx = col if flow == 'source_to_traget' else row
    deg = scatter(edge_weight, idx, dim=0, dim_size=num_nodes, reduce='sum')
    deg_inv_sqrt = deg.pow(-0.5)
    deg_inv_sqrt.masked_fill_(deg_inv_sqrt == float('inf'), 0)
    edge_weight = deg_inv_sqrt[row] * edge_weight * deg_inv_sqrt[col]

    return edge_index, edge_weight
